const { Cryptocurrency, CryptocurrencyPrice } = require('../src/models');
const priceService = require('../src/services/priceService');

async function debugPrices() {
  try {
    console.log('üîç Iniciando diagn√≥stico de precios...\n');

    // 1. Verificar criptomonedas registradas
    console.log('1Ô∏è‚É£ Verificando criptomonedas registradas...');
    const registeredCryptos = await Cryptocurrency.findAll({
      where: { is_active: true },
      order: [['rank', 'ASC']],
      limit: 20 // Solo las primeras 20 para el diagn√≥stico
    });

    console.log(`üìä Total de criptomonedas activas: ${registeredCryptos.length}`);
    console.log('üìã Primeras 10 criptomonedas:');
    registeredCryptos.slice(0, 10).forEach(crypto => {
      console.log(`   ID: ${crypto.id}, Rank: ${crypto.rank}, Symbol: ${crypto.symbol}, Name: ${crypto.name}`);
    });

    // 2. Verificar qu√© IDs de CoinMarketCap estamos usando
    console.log('\n2Ô∏è‚É£ Verificando IDs de CoinMarketCap...');
    const cmcIds = registeredCryptos
      .map(crypto => crypto.rank)
      .filter(rank => rank && rank <= 100);

    console.log(`üìä IDs de CoinMarketCap v√°lidos: ${cmcIds.length}`);
    console.log('üìã IDs que se usar√°n:', cmcIds.slice(0, 10));

    // 3. Obtener datos de precios de CoinMarketCap
    console.log('\n3Ô∏è‚É£ Obteniendo datos de CoinMarketCap...');
    const pricesData = await priceService.fetchLatestPrices(cmcIds);
    
    console.log(`üìä Datos recibidos de CoinMarketCap: ${Object.keys(pricesData).length}`);
    console.log('üìã IDs disponibles en la respuesta:', Object.keys(pricesData).slice(0, 10));

    // 4. Verificar qu√© datos se est√°n guardando
    console.log('\n4Ô∏è‚É£ Verificando datos que se guardar√≠an...');
    let wouldSaveCount = 0;
    let missingDataCount = 0;

    for (const crypto of registeredCryptos) {
      const priceInfo = pricesData[crypto.rank];
      if (priceInfo && priceInfo.quote?.USD) {
        wouldSaveCount++;
        console.log(`   ‚úÖ ${crypto.symbol} (ID: ${crypto.id}, Rank: ${crypto.rank}) - Precio: $${priceInfo.quote.USD.price}`);
      } else {
        missingDataCount++;
        console.log(`   ‚ùå ${crypto.symbol} (ID: ${crypto.id}, Rank: ${crypto.rank}) - Sin datos de precio`);
      }
    }

    console.log(`\nüìä Resumen:`);
    console.log(`   - Criptomonedas que se guardar√≠an: ${wouldSaveCount}`);
    console.log(`   - Criptomonedas sin datos: ${missingDataCount}`);

    // 5. Verificar datos hist√≥ricos existentes
    console.log('\n5Ô∏è‚É£ Verificando datos hist√≥ricos existentes...');
    const historicalStats = await CryptocurrencyPrice.findAll({
      attributes: [
        'cryptocurrency_id',
        [require('sequelize').fn('COUNT', require('sequelize').col('id')), 'count']
      ],
      group: ['cryptocurrency_id'],
      order: [[require('sequelize').fn('COUNT', require('sequelize').col('id')), 'DESC']],
      limit: 10
    });

    console.log('üìã Top 10 criptomonedas con m√°s datos hist√≥ricos:');
    for (const stat of historicalStats) {
      const crypto = registeredCryptos.find(c => c.id === stat.cryptocurrency_id);
      console.log(`   ${crypto?.symbol || 'Unknown'} (ID: ${stat.cryptocurrency_id}) - ${stat.dataValues.count} registros`);
    }

    // 6. Verificar si hay problemas con el mapeo de IDs
    console.log('\n6Ô∏è‚É£ Verificando mapeo de IDs...');
    const cryptoWithPrices = registeredCryptos.filter(crypto => {
      return pricesData[crypto.rank] && pricesData[crypto.rank].quote?.USD;
    });

    console.log('üìã Criptomonedas que S√ç tienen datos de precio:');
    cryptoWithPrices.forEach(crypto => {
      console.log(`   ${crypto.symbol} - ID interno: ${crypto.id}, Rank: ${crypto.rank}`);
    });

    console.log('\nüìã Criptomonedas que NO tienen datos de precio:');
    const cryptoWithoutPrices = registeredCryptos.filter(crypto => {
      return !pricesData[crypto.rank] || !pricesData[crypto.rank].quote?.USD;
    });
    
    cryptoWithoutPrices.forEach(crypto => {
      console.log(`   ${crypto.symbol} - ID interno: ${crypto.id}, Rank: ${crypto.rank}`);
    });

  } catch (error) {
    console.error('‚ùå Error en el diagn√≥stico:', error);
  }
}

// Ejecutar diagn√≥stico
debugPrices(); 